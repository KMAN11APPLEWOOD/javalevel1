import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.*;
import java.util.List;

public class GamePanel extends JPanel implements Runnable {

    final int gridSize = 32;
    final int gridCols = 10;
    final int gridRows = 20;

    final int screenWidth = 640;
    final int screenHeight = 640;
    
    Thread thread;

    private List<TetrisBlock> tetrisBlockList;
    private TetrisBlock block;

    private Color[][] background;

    public GamePanel() {

        this.setPreferredSize(new Dimension(screenWidth, screenHeight));
        this.setBackground(Color.gray);
        this.setDoubleBuffered(true);

        tetrisBlockList = createTetrisBlockList();

        background = new Color[gridRows][gridCols];
    }

    private List<TetrisBlock> createTetrisBlockList() {
        List<TetrisBlock> tetrisBlockList = new ArrayList<>();
        tetrisBlockList.add(new TetrisBlock(new int[][]{{1, 0}, {1, 0}, {1, 1}}, Color.orange));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{0, 1}, {0, 1}, {1, 1}}, Color.blue));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{1, 0}, {1, 1}, {1, 0}}, Color.magenta));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{1, 0}, {1, 1}, {0, 1}}, Color.green));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{0, 1}, {1, 1}, {1, 0}}, Color.red));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{1, 1}, {1, 1}}, Color.yellow));
        tetrisBlockList.add(new TetrisBlock(new int[][]{{1}, {1}, {1}, {1}}, Color.cyan));
        return tetrisBlockList;
    }

    public void spawnBlock() {
        Random random = new Random();
        block = tetrisBlockList.get(random.nextInt(tetrisBlockList.size()));
        block.spawn(gridCols);
    }

    public boolean blockOutOfBounds() {
        if (block.getY() < 0) {
            block = null;
            return true;
        }
        return false;
    }

    public boolean moveBlockDown() {
        if (checkBottom()) {
            return true;
        }
        block.moveDown();
        repaint();

        return false;
    }

    public void moveBlockLeft() {
        if (block == null) {return;}
        if (!checkLeft()) {
            block.moveLeft();
            repaint();
        }
    }

    public void moveBlockRight() {
        if (block == null) {return;}
        if(!checkRight()) {
            block.moveRight();
            repaint();
        }
    }

    public void dropBlock() {
        if (block == null) {return;}
        while(!checkBottom()) {
            moveBlockDown();
        }
        repaint();
    }

    public void rotateBlock() {
        if (block == null) {return;}
        block.rotate();

        if (block.getLeftEdge() < 0) {block.setX(0);}
        if (block.getRightEdge() >= gridCols) {block.setX(gridCols - block.getWidth());}
        if (block.getBottomEdge() >= gridRows) {block.setY(gridRows - block.getHeight());}

        repaint();
    }

    private boolean checkBottom() {
        if (block.getBottomEdge() == gridRows) {
            return true;
        }

        int[][] shape = block.getShape();
        int width = block.getWidth();
        int height = block.getHeight();

        for (int col = 0; col < width; col++) {
            for (int row = height - 1; row >= 0; row--) {
                if (shape[row][col] != 0) {
                    int x = col + block.getX();
                    int y = row + block.getY() + 1;
                    if (y < 0) {break;}
                    if (background[y][x] != null) {return true;}
                    break;
                }
            }
        }

        return false;
    }

    private boolean checkLeft() {
        if (block.getLeftEdge() == 0) {
            return true;
        }

        int[][] shape = block.getShape();
        int width = block.getWidth();
        int height = block.getHeight();

        for (int row = 0; row < height; row++) {
            for (int col = 0; col < width; col++) {
                if (shape[row][col] != 0) {
                    int x = col + block.getX() - 1;
                    int y = row + block.getY();
                    if (y < 0) {break;}
                    if (background[y][x] != null) {return true;}
                    break;
                }
            }
        }

        return false;
    }

    private boolean checkRight() {
        if (block.getRightEdge() == gridCols) {
            return true;
        }

        int[][] shape = block.getShape();
        int width = block.getWidth();
        int height = block.getHeight();

        for (int row = 0; row < height; row++) {
            for (int col = width - 1; col >= 0; col--) {
                if (shape[row][col] != 0) {
                    int x = col + block.getX() + 1;
                    int y = row + block.getY();
                    if (y < 0) {break;}
                    if (background[y][x] != null) {return true;}
                    break;
                }
            }
        }

        return false;
    }

    public void clearLines() {
        boolean lineFilled;
        for (int row = gridRows - 1; row >= 0; row--) {
            lineFilled = true;
            for (int col = 0; col < gridCols; col++) {
                if (background[row][col] == null) {
                    lineFilled = false;
                    break;
                }
            }
            if (lineFilled) {
                clearLine(row);
                shiftDown(row);
                clearLine(0);

                row++;

                repaint();
            }
        }
    }

    private void clearLine(int row) {
        for (int i = 0; i < gridCols; i++) {
            background[row][i] = null;
        }
    }

    private void shiftDown(int r) {
        for (int row = r; row > 0; row--) {
            for (int col = 0; col < gridCols; col++) {
                background[row][col] = background[row - 1][col];
            }
        }
    }

    private void blockToBackground() {
        int[][] shape = block.getShape();
        int h = block.getHeight();
        int w = block.getWidth();
        int x = block.getX();
        int y = block.getY();
        Color colour = block.getColour();

        for (int row = 0; row < h; row++) {
            for (int col = 0; col < w; col++) {
                if (shape[row][col] == 1) {
                    background[row + y][col + x] = colour;
                }
            }
        }
    }

    public void initControls() {
        InputMap im = this.getRootPane().getInputMap();
        ActionMap am = this.getRootPane().getActionMap();

        im.put(KeyStroke.getKeyStroke("LEFT"), "left");
        im.put(KeyStroke.getKeyStroke("RIGHT"), "right");
        im.put(KeyStroke.getKeyStroke("UP"), "up");
        im.put(KeyStroke.getKeyStroke("DOWN"), "down");

        am.put("left", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                moveBlockLeft();
            }
        });

        am.put("right", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                moveBlockRight();
            }
        });

        am.put("up", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                rotateBlock();
            }
        });

        am.put("down", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dropBlock();
            }
        });

    }

    public void start() {
        thread = new Thread(this);
        thread.start();
    }

    @Override
    public void run() {
        while (thread != null) {
            spawnBlock();
            while (!moveBlockDown()) {
                try {
                    Thread.sleep(400);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
            if (blockOutOfBounds()) {break;}
            blockToBackground();
            clearLines();
        }
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        Graphics2D g2 = (Graphics2D) g;

        // Make Tetris Background
        g2.setColor(Color.lightGray);
        g2.fillRect(screenWidth / 4, 0, screenWidth / 2, screenHeight);

        g2.setColor(Color.gray);
        for (int x = screenWidth / 4; x < screenWidth - screenWidth / 4; x += gridSize) {
            for (int y = 0; y < screenHeight; y += gridSize) {
                g2.drawRect(x, y, gridSize, gridSize);
            }
        }

        paintBackground(g);
        if (this.block != null) {
            paintBlock(g);
        }

        g2.dispose();
    }

    public void paintBlock(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        for (int row = 0; row < block.getHeight(); row++) {
            for (int col = 0; col < block.getWidth(); col++) {
                if (block.getShape()[row][col] == 1) {
                    int x = (block.getX() + col) * gridSize;
                    int y = (block.getY() + row) * gridSize;
                    g2.setColor(block.getColour());
                    g2.fillRect(screenWidth / 4 + x + 1, y + 1, gridSize - 2, gridSize - 2);
                }
            }
        }
    }

    private void paintBackground(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Color colour;

        for (int row = 0; row < gridRows; row++) {
            for (int col = 0; col < gridCols; col++) {
                colour = background[row][col];

                if (colour != null) {
                    int x = col * gridSize;
                    int y = row * gridSize;

                    g2.setColor(colour);
                    g2.fillRect(screenWidth / 4 + x + 1, y + 1, gridSize - 2, gridSize - 2);
                }
            }
        }
    }
}
